import sqlite3
import hashlib
def hash_pin(pin):
    return hashlib.sha256(pin.encode()).hexdigest()

class ATMSystem:
    def __init__(self):
        self.conn = sqlite3.connect("atm_database.db")
        self.cursor = self.conn.cursor()
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS accounts (
                username TEXT PRIMARY KEY,
                pin TEXT NOT NULL,
                balance REAL DEFAULT 0.0
            )
        """)
        self.conn.commit()
        self.logged_in_user = None

    def create_account(self):
        username = input("Enter username: ")
        pin = input("Enter PIN (4 digits): ")
        hashed_pin = hash_pin(pin)
        try:
            self.cursor.execute("INSERT INTO accounts (username, pin) VALUES (?, ?)", (username, hashed_pin))
            self.conn.commit()
            print("Account created successfully!")
        except sqlite3.IntegrityError:
            print("Username already exists. Please choose a different username.")

    def authenticate(self):
        username = input("Enter username: ")
        pin = input("Enter PIN: ")
        hashed_pin = hash_pin(pin)

        self.cursor.execute("SELECT * FROM accounts WHERE username = ? AND pin = ?", (username, hashed_pin))
        user = self.cursor.fetchone()

        if user:
            self.logged_in_user = username
            print(f"Welcome, {username}!")
            return True
        else:
            print("Incorrect username or PIN.")
            return False

    def withdraw(self):
        amount = float(input("Enter withdrawal amount: "))
        self.cursor.execute("SELECT balance FROM accounts WHERE username = ?", (self.logged_in_user,))
        balance = self.cursor.fetchone()[0]

        if amount <= 0:
            print("Amount must be greater than 0.")
        elif amount > balance:
            print("Insufficient funds.")
        else:
            new_balance = balance - amount
            self.cursor.execute("UPDATE accounts SET balance = ? WHERE username = ?", (new_balance, self.logged_in_user))
            self.conn.commit()
            print(f"Withdrawal successful. New balance: ${new_balance:.2f}")

    def deposit(self):
        amount = float(input("Enter deposit amount: "))
        self.cursor.execute("SELECT balance FROM accounts WHERE username = ?", (self.logged_in_user,))
        balance = self.cursor.fetchone()[0]

        if amount <= 0:
            print("Amount must be greater than 0.")
        else:
            new_balance = balance + amount
            self.cursor.execute("UPDATE accounts SET balance = ? WHERE username = ?", (new_balance, self.logged_in_user))
            self.conn.commit()
            print(f"Deposit successful. New balance: ${new_balance:.2f}")

    def check_balance(self):
        self.cursor.execute("SELECT balance FROM accounts WHERE username = ?", (self.logged_in_user,))
        balance = self.cursor.fetchone()[0]
        print(f"Your balance is: ${balance:.2f}")

    def change_pin(self):
        new_pin = input("Enter new PIN (4 digits): ")
        hashed_pin = hash_pin(new_pin)
        self.cursor.execute("UPDATE accounts SET pin = ? WHERE username = ?", (hashed_pin, self.logged_in_user))
        self.conn.commit()
        print("PIN updated successfully.")

    def menu(self):
        while True:
            print("\n--- ATM Menu ---")
            print("1. Withdraw")
            print("2. Deposit")
            print("3. Check Balance")
            print("4. Change PIN")
            print("5. Logout")
            choice = input("Enter your choice: ")
            if choice == "1":
                self.withdraw()
            elif choice == "2":
                self.deposit()
            elif choice == "3":
                self.check_balance()
            elif choice == "4":
                self.change_pin()
            elif choice == "5":
                print("Logging out...")
                self.logged_in_user = None
                break
            else:
                print("Invalid choice. Please try again.")

    def run(self):
        while True:
            print("\n--- Welcome to the ATM ---")
            print("1. Login")
            print("2. Create a New Account")
            print("3. Exit")
            choice = input("Enter your choice: ")
            if choice == "1":
                if self.authenticate():
                    self.menu()
            elif choice == "2":
                self.create_account()
            elif choice == "3":
                print("Exit")
                self.conn.close()
                break
            else:
                print("Invalid choice. Please try again.")

if __name__ == "__main__":
    atm_system = ATMSystem()
    atm_system.run()
